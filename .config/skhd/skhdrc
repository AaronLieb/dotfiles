# Configured for skhd.zig v0.0.13-b014a29 

.shell "/bin/dash"

############# MODES #################

:: default : sketchybar -m --bar color=0xff232136
:: picker @ : sketchybar -m --bar color=0xff233036

######## SHORTCUT HOTKEYS ###########

# Restart yabai, skhd, and sketchybar
cmd + shift - r :
      yabai --restart-service && \
      sleep 6                 && \
      sketchybar --reload     && \
      skhd --reload

# Lock the screen
cmd + ctrl - l : pmset displaysleepnow

# Opens a terminal
cmd + shift - return : open -n /Applications/kitty.app

# Opens a browser
cmd + shift - b : /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome;

# Window Margins
.define set_margins : sketchybar --bar display={{1}}; yabai -m config top_padding {{2}} bottom_padding {{3}} left_padding {{4}} right_padding {{5}} window_gap {{6}} external_bar {{1}}:{{7}}:0;

# Tight window margins
ctrl + alt - m : @set_margins("main", "0", "0", "0", "0", "5", "32")

# Normal window margins
ctrl + alt - n : @set_margins("all", "0", "10", "10", "10", "15", "45")

######## SPACES ###########

# Fullscreen a window
alt - f : yabai -m window --toggle zoom-fullscreen

# Float a window
alt + shift - f : yabai -m window --toggle float

# Create a stack space
alt - t : yabai -m space --layout stack

# Rebalance the space
alt - b: yabai -m space --layout bsp --balance

# Rotate the windows in the space
alt - r : yabai -m space --rotate 90

# Focus a space by index
.define focus_space : yabai -m space --focus s{{1}}

cmd - 1 : @focus_space("1")
cmd - 2 : @focus_space("2")
cmd - 3 : @focus_space("3")
cmd - 4 : @focus_space("4")
cmd - 5 : @focus_space("5")
cmd - 6 : @focus_space("6")
cmd - 7 : @focus_space("7")
cmd - 8 : @focus_space("8")
cmd - 9 : @focus_space("9")

# Move space to another display
# Consider changing to just yabai -m space --display x --focus

.define move_display : yabai -m space --display {{1}} --focus
cmd + alt - 1 : @move_display("1")
cmd + alt - 2 : @move_display("2")
cmd + alt - 3 : @move_display("3")

# Destroy a space
cmd + shift - d : yabai -m space --destroy

ctrl + alt - t : sketchybar --bar hidden=false
ctrl + alt - f : sketchybar --bar hidden=true

ctrl + alt - i : sketchybar --bar height=30

##### Zen mode #####

# default < fn - 2 ; zen
# zen < fn - 2 ; default
#
# zen < ctrl + alt - z: \
# for i in $(seq 1 3); do \
#   SPACE="s$i"; \
#   WINDOW=$(yabai -m query --spaces | jq '.[] | select(.label == "'"$SPACE"'") | .windows[0]'); \
#   yabai -m window "$WINDOW" --toggle native-fullscreen && sleep 0.5; \
#   NEW_SPACE=$(yabai -m query --windows | jq '.[] | select(.id == "'"$WINDOW"'") | .index'); \
#   yabai -m space $NEW_SPACE --label $SPACE; \
# done; \
# spotify stop; \
# skhd -k "ctrl + cmd - d"; \
# skhd -k "fn - 2"; \
#
# default < ctrl + alt - z: \
# spotify play uri spotify:playlist:6GLuvfdlzPmXhwN4NXprVO; \
# for i in $(seq 1 3); do \
#   SPACE="s$i"; \
#   WINDOW=$(yabai -m query --spaces | jq '.[] | select(.label == "'"$SPACE"'") | .windows[0]'); \
#   yabai -m window "$WINDOW" --toggle native-fullscreen && sleep 0.5; \
#   NEW_SPACE=$(yabai -m query --windows | jq '.[] | select(.id == "'"$WINDOW"'") | .index'); \
#   yabai -m space $NEW_SPACE --label $SPACE; \
# done; \
# yabai -m space --focus s1; \
# skhd -k "ctrl + cmd - d"; \
# skhd -k "fn - 2"; \

######## WINDOWS ###########

# Find fullscreen window
cmd - 0 : yabai -m space --focus $(yabai -m query --spaces | jq 'map(select(."is-native-fullscreen" == true)) | .[0].index')

# Overloading stack and directional focus
cmd - left :
  yabai -m window --focus stack.prev || \
  yabai -m window --focus stack.last || \
  yabai -m window --focus west
cmd - right :
  yabai -m window --focus stack.next || \
  yabai -m window --focus stack.first || \
  yabai -m window --focus east
cmd - 0x32 :
   yabai -m window --focus stack.next || \
   yabai -m window --focus stack.first || \
   yabai -m window --focus east
cmd - up : yabai -m window --focus north
cmd - down : yabai -m window --focus south

# Move a window to a space by index

.define move_space : yabai -m window --space s{{1}}

cmd + shift - 1 : @move_space("1")
cmd + shift - 2 : @move_space("2")
cmd + shift - 3 : @move_space("3")
cmd + shift - 4 : @move_space("4")
cmd + shift - 5 : @move_space("5")
cmd + shift - 6 : @move_space("6")
cmd + shift - 7 : @move_space("7")
cmd + shift - 8 : @move_space("8")
cmd + shift - 9 : @move_space("9")

# Insert new window in position
alt + ctrl - left : yabai -m window --insert west
alt + ctrl - up : yabai -m window --insert north
alt + ctrl - down : yabai -m window --insert south
alt + ctrl - right : yabai -m window --insert east

# Right Cmd + hjkl for arrow keys
rcmd - h | left
rcmd - j | down
rcmd - k | up
rcmd - l | right

###### GLOBAL REBINDS ######
ctrl - 1 | cmd - 1
ctrl - 2 | cmd - 2
ctrl - 3 | cmd - 3
ctrl - 4 | cmd - 4
ctrl - 5 | cmd - 5
ctrl - 6 | cmd - 6
ctrl - 7 | cmd - 7
ctrl - 8 | cmd - 8
ctrl - 9 | cmd - 9

###### APPLICATION SPECIFIC HOTKEYS ######

# History Back
lcmd - h [
  "Slack" | cmd - 0x21 # cmd + [
  "Discord" | cmd - 0x21 # cmd + [
  * ~
]

# History Forward
lcmd - l [
  "Slack" | cmd - 0x1E # cmd + ]
  "Discord" | cmd - 0x21 # cmd + [
  * ~
]

# Omnisearch
lcmd - o [
  "Slack" | cmd - k
  "Discord" | cmd - k
  "Todoist" | cmd - k
  * ~
]

# Navigate Left/Down
lcmd - j [
  "Discord" | alt - down
  "Slack" | alt - down
  * ~
]

lcmd + shift - j [
  "Discord" | alt + shift - down
  "Slack" | alt + shift - down
  * ~
]

# Navigate Right/Up
lcmd - k [
  "Discord" | alt - up
  "Slack" | alt - up
  * ~
]

lcmd + shift - k [
  "Discord" | alt + shift - up
  "Slack" | alt + shift - up
  * ~
]

# Misc
lcmd - 0x29 [ # cmd + ;
  "Google Chrome" : skhd -k "cmd + shift - a" && skhd -k "return"
  "Discord" |  cmd + alt - right
  * ~
]

lcmd - t [ # cmd + t
  "Todoist" | q
  * ~
]

###### TEXT HOTKEYS ######
ctrl + shift - f : skhd -t "FargateTaskHostManagerFrontendService"
ctrl + shift - b : skhd -t "FargateTaskHostManagerBackendService"

###### WINDOW PICKER ######
cmd - d ; picker
f19 ; picker # rshift

picker < escape ; default

.define pick : yabai -m window --focus "$(yabai -m query --windows | jq 'map(select(.app == "{{1}}")) | .[0].id')"
.define pick_and_key : yabai -m window --focus "$(yabai -m query --windows | jq 'map(select(.app == "{{1}}")) | .[0].id')" && skhd -k "{{2}}"

picker < f ;       default : @pick("kitty")
picker < cmd - f ; default : @pick("kitty")

picker < g ;       default : @pick("Google Chrome")
picker < cmd - g ; default : @pick("Google Chrome")

picker < s ;       default : @pick("Slack")
picker < cmd - s ; default : @pick("Slack")

picker < d ;       default : @pick("Discord")
picker < cmd - d ; default : @pick("Discord")

picker < e ;       default : @pick_and_key("Microsoft Outlook", "ctrl - 1")
picker < cmd - e ; default : @pick_and_key("Microsoft Outlook", "ctrl - 1")
picker < c ;       default : @pick_and_key("Microsoft Outlook", "ctrl - 2")
picker < cmd - c ; default : @pick_and_key("Microsoft Outlook", "ctrl - 2")

picker < a ;       default : @pick("Obsidian")
picker < cmd - a ; default : @pick("Obsidian")

picker < v ;       default : @pick("Amazon Chime")
picker < cmd - v ; default : @pick("Amazon Chime")

picker < t ;       default : @pick("TickTick")
picker < cmd - t ; default : @pick("TickTick")

